<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Edward Chu's Blog</title><link>http://edwardchu.org</link><description>A front-end focused blog.</description><atom:link href="http://edwardchu.org/feed.xml" rel="self" type="application/rss+xml"></atom:link><item><title>用 Docker 构建 NodeJS 应用</title><description><![CDATA[<p><a href="http://www.docker.com/">Docker</a> 是个轻量级的虚拟化解决方案，可以将你的应用和所需的运行环境打包起来，部署至其他环境，保证开发或生产环境的统一。<br>对于开发人员来说，Docker 可以减少初次搭建开发环境的麻烦；<br>对于运维人员来说，Docker 使自动化、规模化部署变得更加简单。<br><!-- more --></p>
<h2>Docker 入门</h2>
<p>本文不涉及太多的入门知识，假若你未曾听过 Docker，请先浏览官方资源：<br>1. 观看 Docker <a href="https://www.docker.com/whatisdocker/">介绍视频</a><br>2. 动手完成 10 分钟 <a href="https://www.docker.com/tryit/#">在线交互教程</a></p>
<h2>下载并更新 Ubuntu 镜像</h2>
<p>本文中 NodeJS 应用是部署在 Ubuntu 下的，所以要先通过以下命令，下载 Ubuntu 镜像，并更新保存。</p>
<pre><code class="bash"><span class="hljs-comment"># 从 Docker Hub 下载官方维护的 Ubuntu</span>
docker pull ubuntu:<span class="hljs-number">14.10</span>

<span class="hljs-comment"># 下载完毕后，先更新软件源</span>
docker run ubuntu:<span class="hljs-number">14.10</span> apt-get update

<span class="hljs-comment"># 上面命令会生成一个container，先获得其 id</span>
<span class="hljs-comment"># -l：显示最新的 container</span>
doocker ps <span class="hljs-operator">-l</span>

<span class="hljs-comment"># 提交改动，并覆盖原有的 Ubuntu 镜像</span>
docker commit &lt;container_id&gt; ubuntu:<span class="hljs-number">14.10</span></code></pre>
<h2>从创建简单的 NodeJS 应用镜像入手</h2>
<p>我们先来创建一个基于 ExpressJS 的简单 NodeJS 应用，以下是文件目录结构和步骤。</p>
<h3>目录结构</h3>
<pre class="tree">
├── docker-node-hello/
│   ├── index.js
│   ├── package.json
│   ├── Dockerfile
</pre>

<h3>文件创建步骤</h3>
<ol>
<li><p>创建文件夹</p>
<pre><code class="bash">mkdir ~/docker-node-hello &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$_</span></code></pre>
</li>
<li><p>创建 index.js</p>
<pre><code class="js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)
<span class="hljs-keyword">var</span> app = express()

app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(req, res)</span> </span>{
 res.send(<span class="hljs-string">'Hello World!'</span>)
})

<span class="hljs-keyword">var</span> server = app.listen(<span class="hljs-number">3001</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{

 <span class="hljs-keyword">var</span> host = server.address().address
 <span class="hljs-keyword">var</span> port = server.address().port

 <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Example app listening at http://%s:%s'</span>, host, port)

})</code></pre>
</li>
<li><p>创建 package.json</p>
<pre><code class="json">{
 "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"docker-node-hello"</span></span>,
 "<span class="hljs-attribute">private</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>,
 "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.0.1"</span></span>,
 "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Node.js Hello world app on Ubuntu using docker"</span></span>,
 "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{
   "<span class="hljs-attribute">express</span>": <span class="hljs-value"><span class="hljs-string">"4.x.x"</span>
 </span>}
</span>}</code></pre>
</li>
<li><p>创建 Dockerfile 配置文件</p>
<pre><code class="bash"><span class="hljs-comment"># 设置基础镜像</span>
FROM ubuntu:<span class="hljs-number">14.10</span>

<span class="hljs-comment"># 如果上个步骤已经更新软件源，这步可以忽略</span>
RUN apt-get update

<span class="hljs-comment"># 安装 NodeJS 和 npm</span>
RUN apt-get install -y nodejs npm

<span class="hljs-comment"># 将目录中的文件添加至镜像的 /srv/hello 目录中</span>
ADD . /srv/hello

<span class="hljs-comment"># 设置工作目录</span>
WORKDIR /srv/hello

<span class="hljs-comment"># 安装 Node 依赖库</span>
RUN npm install

<span class="hljs-comment"># 暴露 3001 端口，便于访问</span>
EXPOSE <span class="hljs-number">3001</span>

<span class="hljs-comment"># 设置启动时默认运行命令</span>
CMD [<span class="hljs-string">"nodejs”, “/srv/hello/index"</span>]</code></pre>
</li>
</ol>
<h3>构建镜像</h3>
<pre><code class="bash">  <span class="hljs-comment"># 通过该命令，按照 Dockerfile 所配置的信息构建出镜像</span>
  <span class="hljs-comment"># -t 镜像的名称</span>
  <span class="hljs-comment"># --rm 构建成功后，删除临时镜像（每执行一行 Dockerfile 中的命令，就会创建一个临时镜像）</span>
  docker build --rm -t node-hello .

  <span class="hljs-comment"># 检查镜像是否创建成功</span>
  docker images</code></pre>
<h3>运行镜像</h3>
<pre><code class="bash">  <span class="hljs-comment"># 对于 Mac 或 Windows 来说，要先查看 boot2docker 的 IP</span>
  boot2docker ip

  <span class="hljs-comment"># 运行刚刚创建的镜像</span>
  <span class="hljs-comment"># -p 设置端口，格式为「主机端口:容器端口」</span>
  docker run -p <span class="hljs-number">3001</span>:<span class="hljs-number">3001</span> node-hello</code></pre>
<h3>访问网页</h3>
<p>若终端打印出 <code>Example app listening at http://...</code>，则部署成功。<br>可以用浏览器访问 <code>http://&lt;boot2docker ip&gt;:3001</code>，或运行 <code>curl -s &quot;$(boot2docker ip):3001&quot;</code>。</p>
<h2>创建完整的 NodeJS 应用镜像（含 Mongodb / Git）</h2>
<p>通过上面的例子，我们知道了整个 Docker 镜像的基本创建过程。<br>但实际项目中，项目代码往往是通过 Git 来管理的，而且还会连接到一些数据库，如 Mongodb。<br>本例子中，我们将尝试部署一个 MEAN 架构的 NodeJS 应用。</p>
<blockquote>
<p>什么是 MEAN 架构？<br>MEAN 表示 Mongodb / ExpressJS / AngularJS / NodeJS，是目前流行的网站应用开发组合，涵盖前端至后台。由于这些框架用的语言都是 Javascript，所以又戏称 Javascript Fullstack。</p>
</blockquote>
<h3>目录结构</h3>
<pre class="tree">
├── docker-node-full/
│   ├── start.sh
│   ├── Dockerfile
</pre>

<h3>文件创建步骤</h3>
<ol>
<li><p>创建文件夹</p>
<pre><code class="bash">mkdir ~/docker-node-full &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$_</span></code></pre>
</li>
<li><p>创建 Dockerfile 配置文件</p>
<pre><code class="bash"><span class="hljs-comment"># 设置基础镜像</span>
FROM ubuntu:<span class="hljs-number">14.10</span>

<span class="hljs-comment"># 安装 NodeJS 和 npm</span>
RUN apt-get install -y nodejs npm

<span class="hljs-comment"># 由于 apt-get 下载的 Node 实际上是 nodejs，所以要创建一个 node 的快捷方式</span>
RUN ln <span class="hljs-operator">-s</span> /usr/bin/nodejs /usr/bin/node

<span class="hljs-comment"># 安装 Git</span>
RUN apt-get install -y git

<span class="hljs-comment"># 安装 Mongodb（来自官方教程）</span>
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:<span class="hljs-number">80</span> --recv <span class="hljs-number">7</span>F0CEB10
RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen'</span> | tee /etc/apt/sources.list.d/mongodb.list
RUN apt-get update
RUN apt-get install -y mongodb-org

<span class="hljs-comment"># 设置工作目录</span>
WORKDIR /srv/full

<span class="hljs-comment"># 清空已存在的文件（如果有）</span>
RUN rm -rf /srv/full

<span class="hljs-comment"># 通过 Git 下载准备好的 MEAN 架构的网站代码</span>
RUN git <span class="hljs-built_in">clone</span> https://github.com/chuyik/fullstack-demo-dist.git .

<span class="hljs-comment"># 安装 NodeJS 依赖库</span>
RUN npm install --production

<span class="hljs-comment"># 创建 mongodb 数据文件夹</span>
RUN mkdir -p /data/db

<span class="hljs-comment"># 暴露端口（分别是 NodeJS 应用和 Mongodb）</span>
EXPOSE <span class="hljs-number">5566</span> <span class="hljs-number">27017</span>

<span class="hljs-comment"># 设置 NodeJS 应用环境变量</span>
ENV NODE_ENV=production PORT=<span class="hljs-number">5566</span>

<span class="hljs-comment"># 添加启动脚本</span>
ADD start.sh /tmp/
RUN chmod +x /tmp/start.sh

<span class="hljs-comment"># 设置启动时默认运行命令</span>
CMD [<span class="hljs-string">"bash"</span>, <span class="hljs-string">"/tmp/start.sh"</span>]</code></pre>
</li>
<li><p>创建 start.sh 启动脚本</p>
<pre><code class="bash"><span class="hljs-comment"># 后台启动 Mongodb</span>
mongod --fork --logpath=/var/<span class="hljs-built_in">log</span>/mongo.log --logappend

<span class="hljs-comment"># 运行 NodeJS 应用</span>
npm start</code></pre>
</li>
</ol>
<h3>构建镜像</h3>
<pre><code class="bash">  <span class="hljs-comment"># 通过该命令，按照 Dockerfile 所配置的信息构建出镜像</span>
  docker build --rm -t node-full .

  <span class="hljs-comment"># 检查镜像是否创建成功</span>
  docker images</code></pre>
<h3>运行镜像</h3>
<pre><code class="bash">  <span class="hljs-comment"># 对于 Mac 或 Windows 来说，要先查看 boot2docker 的 IP</span>
  boot2docker ip

  <span class="hljs-comment"># 运行刚刚创建的镜像</span>
  <span class="hljs-comment"># -p 设置端口，格式为「主机端口:容器端口」</span>
  docker run -p <span class="hljs-number">5566</span>:<span class="hljs-number">5566</span> node-full</code></pre>
<h3>访问网页</h3>
<p>若终端打印出以下命令，则部署成功。</p>
<blockquote>
<p> about to fork child process, waiting until server is ready for connections.<br>    forked process: 9<br>  child process started successfully, parent exiting<br> demo@0.0.0 start /srv<br> node server/app.js<br>  Express server listening on 5566, in production mode</p>
</blockquote>
<p>可以用浏览器访问 <code>http://&lt;boot2docker ip&gt;:5566</code>，或运行 <code>curl -s &quot;$(boot2docker ip):5566&quot;</code>。</p>
<h2>保存 Mongodb 数据文件</h2>
<p>由于 Mongodb 服务运行在 Docker 容器 (container) 中，所以数据也在里面，但这并不利于数据管理和保存。因此，可以通过一些方法，将 Mongodb 数据文件保存在容器的外头。</p>
<h3>磁盘映射</h3>
<p>这个是最简单的方式，在 <code>docker run</code> 命令当中，就有磁盘映射的参数 <code>-v</code>。</p>
<pre><code class="bash"><span class="hljs-comment"># -v 磁盘映射，格式为「主机目录:容器目录」</span>
docker run -p <span class="hljs-number">5566</span>:<span class="hljs-number">5566</span> -v /var/mongodata:/data/db node-full</code></pre>
<p>但这个命令在 Mac 和 Windows 中执行失败，因为 boot2docker 的虚拟机不支持。<br>所以，可以将数据保存在 boot2docker 内，并设置共享文件夹便于 Mac 或 Windows 访问。</p>
<h3>Mac 的磁盘映射方案</h3>
<pre><code class="bash"><span class="hljs-comment"># 在 boot2docker 中，运行该命令</span>
boot2docker ssh
<span class="hljs-comment"># 进入 bash 后，创建存放 Mongodb 数据库文件的目录</span>
sudo mkdir -p /mnt/sda1/dev

<span class="hljs-comment"># Mac 用户通过 brew 安装 sshfs</span>
brew install sshfs
<span class="hljs-comment"># 通过 sshfs，把 /mnt/sda1/dev 挂载到 Mac 中</span>
<span class="hljs-comment"># 注：boot2docker 的默认用户为 docker/tcuser</span>
<span class="hljs-built_in">echo</span> tcuser | sshfs docker@localhost:/mnt/sda1/dev /var/mongodata -p <span class="hljs-number">2022</span> -o password_stdin

<span class="hljs-comment"># 运行镜像测试（映射 boot2docker 的目录）</span>
docker run -p <span class="hljs-number">5566</span>:<span class="hljs-number">5566</span> -v /mnt/sda1/dev:/data/db node-full</code></pre>
<h2>优化建议</h2>
<h3>将 NodeJS 和 Mongodb 分开</h3>
<p>上个例子中，我们把 NodeJS 和 Mongodb 放进了同一个镜像中，但本着一次只做一件事的原则，将其放进不同的镜像可能会更好。但分开后，NodeJS 和 Mongodb 运行的容器该如何关联呢？这里不展开介绍，有兴趣可以查阅该<a href="http://www.luiselizondo.net/how-to-create-a-docker-node-js-mongodb-varnish-environment/">博文</a>。</p>
<h3>使用进程管理工具</h3>
<p>上个例子中，我们通过 bash 脚本来运行多个命令，但也可以用一些进程管理工具来配置进程，如 <a href="http://supervisord.org/introduction.html">Supervisor</a>。整合的方式可以查阅官方教程 <a href="https://docs.docker.com/articles/using_supervisord/">Using Supervisor with Docker</a>。</p>
<h2>一些有用的 Docker 命令</h2>
<h3>查看后台运行容器的日志</h3>
<pre><code class="bash">docker ps <span class="hljs-operator">-l</span>
docker logs &lt;container_id&gt;</code></pre>
<h3>开始和关闭容器的运行</h3>
<pre><code class="bash">docker stop &lt;container_id&gt;
docker start -i &lt;container_id&gt;
docker restart -i &lt;container_id&gt;</code></pre>
<h3>运行镜像的bash</h3>
<pre><code class="bash"><span class="hljs-comment"># -i 将命令的输出信息重定向到 stdout</span>
<span class="hljs-comment"># -t 开启 tty 终端，这样就能够输入指令</span>
docker run -it ubuntu:<span class="hljs-number">14.10</span> bash</code></pre>
<h3>导入和导出镜像</h3>
<pre><code class="bash">docker save ubuntu:<span class="hljs-number">14.10</span> &gt; ubuntu_14.<span class="hljs-number">10</span>.tar
sudo docker ubuntu:<span class="hljs-number">14.10</span> &lt; ubuntu_14.<span class="hljs-number">10</span>.tar</code></pre>
<h3>停止和删除所有容器（来自 <a href="https://coderwall.com/p/ewk0mq/stop-remove-all-docker-containers">Fabio Rehm</a>）</h3>
<pre><code class="bash">docker stop $(docker ps <span class="hljs-operator">-a</span> -q)
docker rm $(docker ps <span class="hljs-operator">-a</span> -q)</code></pre>
<h2>参考文章 Credits</h2>
<p><a href="https://docs.docker.com/examples/nodejs_web_app/">Dockerizing a Node.js Web App</a><br><a href="http://tech.uc.cn/?p=2726">利用Docker构建开发环境 | UC技术博客</a><br><a href="http://docs.docker.com/reference/builder">Dockerfile - Docker Documentation</a><br><a href="http://docs.docker.com/reference/commandline/cli/">Command line - Docker Documentation</a><br><a href="https://docs.docker.com/articles/using_supervisord/">Using Supervisor - Docker Documentation</a><br><a href="http://www.luiselizondo.net/how-to-create-a-docker-node-js-mongodb-varnish-environment/">How to create a Docker + Node.js + MongoDB + Varnish environment</a><br><a href="https://gist.github.com/codeinthehole/7ea69f8a21c67cc07293">How to share folders with docker containers on OSX</a></p>
]]></description><pubDate>Tue Dec 30 2014 08:00:00 GMT+0800 (CST)</pubDate><link>http://edwardchu.org/articles/docker-node-app.html</link><guid isPermaLink="true">http://edwardchu.org/articles/docker-node-app.html</guid></item><item><title>HTML/JS/CSS Hack Collection</title><description><![CDATA[<p>Here are some funny hacks for your web browser, mostly collected from Internet,
<br>
which may save your day or make you lol.
</p><!-- more --><p>Hacks would be classified into three parts and showed in separate pages above.
</p><h2>Credits</h2>
<p><a href="http://www.quora.com/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about">Dockerizing a Node.js Web App</a><br><a href="http://www.cnblogs.com/wayou/p/things_you_dont_know_about_frontend.html">前端不为人知的一面--前端冷知识集锦</a></p>
]]></description><pubDate>Sun Dec 28 2014 08:00:00 GMT+0800 (CST)</pubDate><link>http://edwardchu.org/articles/html-hack-collection.html</link><guid isPermaLink="true">http://edwardchu.org/articles/html-hack-collection.html</guid></item></channel></rss>